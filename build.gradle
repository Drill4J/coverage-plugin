plugins {
    id 'kotlin-multiplatform'
    id 'kotlinx-serialization'
}
repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
    maven { url "https://dl.bintray.com/kodein-framework/Kodein-DI" }
    maven { url "https://dl.bintray.com/soywiz/soywiz" }
    maven { url "https://dl.bintray.com/kotlin/kotlin-eap" }
    maven { url "https://kotlin.bintray.com/ktor" }
    maven { url "https://dl.bintray.com/spekframework/spek-dev" }
    maven { url "https://kotlin.bintray.com/kotlinx" }
    maven { url "https://mymavenrepo.com/repo/OgSYgOfB6MOBdJw3tWuX/" }
}
kotlin {
    targets {
        fromPreset(presets.jvm, 'adminPart')
        fromPreset(presets.jvm, 'agentPart')
    }
    sourceSets {
        agentPartMain {

            dependencies {
              
                //fixme 6 only..
                implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
                implementation project(":drill-plugin-api:drill-agent-part")
                implementation project(":drill-common")
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.9.1"
                api("org.jacoco:org.jacoco.core:0.8.3")
            }
        }
        adminPartMain {

            dependencies {
                implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.9.1"
                implementation project(":drill-plugin-api:drill-admin-part")
                implementation project(":drill-common")
                api("org.jacoco:org.jacoco.core:0.8.3")
            }
        }
        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:0.9.1"
            }
        }

    }
}


adminPartJar {
    archiveName = "admin-part.jar"
    from(file("./plugin_config.json")) {
        into("static")
    }
    from {
        configurations.adminPartMainApi.collect { it.isDirectory() ? it : zipTree(it) }
    }

}
agentPartJar {
    archiveName = "agent-part.jar"
    from(file("./plugin_config.json")) {
        into("static")
    }
    from {
        configurations.agentPartMainApi.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

//configurations.forEach{
//    println(it)
//}


task packPlugin(type: Jar) {
    from(adminPartJar, agentPartJar)
    destinationDir = file("../../distr/adminStorage")
}

task buildCoveragePlugin {
    group = "app"
    dependsOn "packPlugin"

}

task buildCoveragePluginDev(type: Copy) { 
    group = "app"
    dependsOn "buildCoveragePlugin"
    from(agentPartJar)
    from(file("plugin_config.json")) {
        into("static")
    }
    destinationDir = file("../../distr/drill-plugins/coverage")
}